entity thermo is

port (current_temp : in bit_vector(6 downto 0);
      desired_temp : in bit_vector(6 downto 0);
      display_sel  : in bit;
      COOL         : in bit;
      HEAT         : in bit;
      CLK          : in bit; 
      --RESET        : in bit; 
      AC_ON        : out bit;
      Furnace_ON   : out bit;
      display_temp : out bit_vector(6 downto 0));

end thermo;
-- The entity 
architecture test of thermo is

signal reg_current_temp : bit_vector(6 downto 0); 
signal reg_desired_temp : bit_vector(6 downto 0);
signal reg_display_sel  : bit;
signal reg_COOL         : bit;
signal reg_HEAT         : bit; 
begin
 

process(CLK)
begin 
if CLK'event and CLK = '1' then 
reg_current_temp <= current_temp; 
reg_desired_temp <= desired_temp; 
reg_display_sel  <= display_sel; 
reg_COOL <= COOL; 
reg_HEAT <= HEAT; 
end if; 
end process; 

process(CLK)
begin
if CLK'event and CLK = '1' then
    if reg_display_sel = '1'  then
        display_temp <= reg_current_temp; 
    else
        display_temp <= reg_desired_temp;
    end if;  
end if;
end process; 

process(CLK)  
begin 
if CLK'event and CLK = '1' then 
   if (reg_current_temp > reg_desired_temp and reg_COOL = '1' and reg_HEAT = '0') then
    AC_ON <= '1';
    Furnace_ON <= '0'; 
   elsif(reg_current_temp < reg_desired_temp and reg_HEAT = '1' and reg_COOL = '0' ) then
    Furnace_ON <= '1';
    AC_ON <= '0';
   elsif(reg_HEAT = '1' and reg_COOL = '1') then 
    Furnace_ON <= '0';
    AC_ON <= '0';
   else 
    Furnace_ON <= '0';
    AC_ON <= '0';
    end if;   
end if; 
end process; 
end test; 

-- Correct Code. 

entity Thermo is

    Port (

           CLK              : in   bit;

           CURRENT_TIME     : in    bit_vector(6 downto 0);

           DESIRED_TIME     : in    bit_vector(6 downto 0);

           DISPLAY_SELECT   : in    bit;

           HEAT             : in    bit;

           COOL             : in    bit;

           TEMP_DISPLAY     : out   bit_vector(6 downto 0);

           AC_ON            : out   bit;

           FURNACE_ON       : out   bit

    );

end Thermo;



architecture Behavioral of Thermo is

signal CURRENT_TIME_REG, DESIRED_TIME_REG       : bit_vector(6 downto 0);

signal DISPLAY_SELECT_REG, HEAT_REG, COOL_REG   : bit;



begin

    process( -- FlipFlop

        CLK

    )

    begin

        if CLK'event and CLK = '1' then

           CURRENT_TIME_REG     <=    CURRENT_TIME;

           DESIRED_TIME_REG     <=    DESIRED_TIME;

           DISPLAY_SELECT_REG   <=    DISPLAY_SELECT;

           HEAT_REG             <=    HEAT;

           COOL_REG             <=    COOL;

        end if;

    end process;

       

    process( -- FlipFlop

        CLK

    )

    begin

        if CLK'event and CLK = '1' then

            if DISPLAY_SELECT_REG = '1' then

                TEMP_DISPLAY <= CURRENT_TIME_REG;

            else

                TEMP_DISPLAY <= DESIRED_TIME_REG;

            end if;

        end if;

    end process;



    process( -- FlipFlop

        CLK

    )

    begin

        if CLK'event and CLK = '1' then

            if DESIRED_TIME_REG < CURRENT_TIME_REG and COOL_REG = '1' then

                AC_ON <= '1';

            else

                AC_ON <= '0';

            end if;

           

            if DESIRED_TIME_REG > CURRENT_TIME_REG and HEAT_REG = '1' then

                FURNACE_ON <= '1';

            else

                FURNACE_ON <= '0';

            end if;

        end if;

    end process;

             
end Behavioral;

-- My correct code 

entity thermo is

port (current_temp : in bit_vector(6 downto 0);
      desired_temp : in bit_vector(6 downto 0);
      display_sel  : in bit;
      COOL         : in bit;
      HEAT         : in bit;
      CLK          : in bit; 
      --RESET        : in bit; 
      AC_ON        : out bit;
      Furnace_ON   : out bit;
      display_temp : out bit_vector(6 downto 0));

end thermo;
-- The entity 
architecture test of thermo is

signal reg_current_temp : bit_vector(6 downto 0); 
signal reg_desired_temp : bit_vector(6 downto 0);
signal reg_display_sel  : bit;
signal reg_COOL         : bit;
signal reg_HEAT         : bit; 
begin
 

process(CLK)
begin 
if CLK'event and CLK = '1' then 
reg_current_temp <= current_temp; 
reg_desired_temp <= desired_temp; 
reg_display_sel  <= display_sel; 
reg_COOL <= COOL; 
reg_HEAT <= HEAT; 
end if; 
end process; 

process(CLK)
begin
if CLK'event and CLK = '1' then
    if reg_display_sel = '1'  then
        display_temp <= reg_current_temp; 
    else
        display_temp <= reg_desired_temp;
    end if;  
end if;
end process; 

process(CLK)  
begin 
if CLK'event and CLK = '1' then 
   if (reg_current_temp > reg_desired_temp and reg_COOL = '1') then
    AC_ON <= '1'; 
   else 
    AC_ON <= '0';
   end if;   
   if(reg_current_temp < reg_desired_temp and reg_HEAT = '1') then
    Furnace_ON <= '1';
   else  
    Furnace_ON <= '0';
   end if; 
end if; 
end process; 
end test; 

-- Other Codes 


entity thermo_sync is

   port

      (

         Clk            : in std_logic;

         Rst            : in bit;

         cool           : in bit;

         heat           : in bit;

         A_C            : out bit;

         Furnace        : out bit;

         current_temp   : in bit_vector (6 downto 0);

         desired_temp   : in bit_vector (6 downto 0);

         display_select : in bit;

         temp_display   : out bit_vector (6 downto 0)

      );

end entity;



architecture rtl of thermo_sync is



   signal cool_sync           : bit;

   signal heat_sync           : bit;

   signal A_C_sync            : bit;

   signal Furnace_sync        : bit;

   signal current_temp_sync   : bit_vector (6 downto 0);

   signal desired_temp_sync   : bit_vector (6 downto 0);

   signal display_select_sync : bit;

   signal temp_display_sync   : bit_vector (6 downto 0);





begin



   sync_inputs:process (Clk, Rst)

   begin

      if Rst = '1' then

         current_temp_sync <= (others => '0');

         desired_temp_sync <= (others => '0');

         display_select_sync <= '0';

         cool_sync <= '0';

         heat_sync <= '0';

      elsif rising_edge (Clk) then

         current_temp_sync <= current_temp;

         desired_temp_sync <= desired_temp;

         display_select_sync <= display_select;

         cool_sync <= cool;

         heat_sync <= heat;

      end if;

   end process;





   sync_outputs:process (Clk, Rst)

   begin

      if Rst = '1' then

         Furnace <= '0';

         A_C <= '0';

         temp_display <= (others => '0');

      elsif rising_edge (Clk) then

         Furnace <= Furnace_sync;

         A_C <= A_C_sync ;

         temp_display <= temp_display_sync;

      end if;

   end process;





   

   diplay_proc: process (display_select_sync, current_temp_sync, desired_temp_sync)

      begin

         if display_select_sync = '1' then

            temp_display_sync <= current_temp_sync;

         else

            temp_display_sync <= desired_temp_sync;

         end if;

      end process;

     

      A_C_proc:process (cool_sync, current_temp_sync, desired_temp_sync)

         begin

            if cool_sync = '0' then

               A_C_sync <= '0';

            elsif (desired_temp_sync < current_temp_sync) then

               A_C_sync <= '1';

            else

               A_C_sync <= '0';

            end if;

         end process;

         

      Furnace_proc:process (heat_sync, current_temp_sync, desired_temp_sync)

         begin

            if heat_sync = '0' then

               Furnace_sync <= '0';

            elsif (desired_temp_sync > current_temp_sync) then

               Furnace_sync <= '1';

            else

               Furnace_sync <= '0';         

            end if;

         end process;

end rtl;









library IEEE;

use IEEE.STD_LOGIC_1164.all;



entity thermo_sync_tb is

end entity;

architecture rtl of thermo_sync_tb is



   component thermo_sync is



   port

      (

         Clk            : in std_logic;

         Rst            : in bit;

         cool           : in bit;

         heat           : in bit;

         A_C            : out bit;

         Furnace        : out bit;

         current_temp   : in bit_vector (6 downto 0);

         desired_temp   : in bit_vector (6 downto 0);

         display_select : in bit;

         temp_display   : out bit_vector (6 downto 0)

      );

   end component;



   signal Clk           : std_logic:= '0';

   signal Rst           : bit;

   signal cool          : bit:= '0';

   signal heat          : bit:= '1';

   signal A_C           : bit;

   signal Furnace       : bit;

   signal current_temp  : bit_vector (6 downto 0);

   signal desired_temp  : bit_vector (6 downto 0);

   signal display_select: bit:= '0';

   signal temp_display  : bit_vector (6 downto 0);

   signal satureted     : bit:= '1';





begin



   Clk <= not (Clk) after 10 ns;

   Rst <= '1', '0' after 100 ns;



   display_select <= not (display_select) after 50 ns;

   cool <= not (cool) after 120 ns;

   heat <= not (heat) after 80 ns;

   

   

   UUT:thermo_sync

   port map

   (

      Clk            => Clk,

      Rst            => Rst,

      cool           => cool,

      heat           => heat,

      A_C            => A_C,

      Furnace        => Furnace,

      current_temp   => current_temp,

      desired_temp   => desired_temp,

      display_select => display_select,

      temp_display   => temp_display

   );

   

   test_proc:process

   begin

      wait until rising_edge(Clk);

      desired_temp   <= "0100001";

      if cool = '1' and heat = '1' then

         if current_temp > desired_temp then

            -- wait for 10 ns;

            current_temp   <= '0' & current_temp(current_temp'left downto 1);

         else

            -- wait for 10 ns;

            current_temp <= current_temp(current_temp'left - 1 downto 0) & '1';

         end if;

      elsif cool = '1' and heat = '0' then

         if A_C = '1' then

            current_temp   <= '0' & current_temp(current_temp'left downto 1);

         else

            current_temp <= current_temp;

         end if;

         -- wait for 10 ns;

         current_temp   <= '0' & current_temp(current_temp'left downto 1);

      elsif cool = '0' and heat = '1' then

         if Furnace = '1' then

            current_temp <= current_temp(current_temp'left - 1 downto 0) & '1';

         else

            current_temp <= current_temp;

         end if;

         -- wait for 10 ns;

      elsif cool = '0' and heat = '0' then

         current_temp <= current_temp;

         -- wait for 10 ns;

      end if;

     

     

      --wait;

   end process;

end rtl;





