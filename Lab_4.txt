library IEEE; 
USE IEEE.STD_LOGIC_1164.all; 
entity thermo is 

port(CLK 		: in std_ulogic;
     RESET		: in std_ulogic;
     Current_temp       : in std_ulogic_vector(6 downto 0); 
     Desired_temp	: in std_ulogic_vector(6 downto 0); 
     Display_sel        : in std_ulogic; 
     COOL		: in std_ulogic;
     HEAT               : in std_ulogic; 
     Furnace_hot	: in std_ulogic; 
     AC_ready		: in std_logic;
     Temp_display	: out std_ulogic_vector(6 downto 0);
     AC_on		: out std_ulogic;
     Furnace_on		: out std_ulogic; 
     FAN_on             : out std_ulogic); 
end thermo;

architecture RTL of thermo is 
signal Current_temp_reg :  std_ulogic_vector(6 downto 0);
signal Desired_temp_reg :  std_ulogic_vector(6 downto 0);
signal Display_sel_reg  :  std_ulogic;
signal COOL_reg         :  std_ulogic;
signal HEAT_reg         :  std_ulogic;
signal Furnace_hot_reg  :  std_ulogic;
signal AC_ready_reg     :  std_ulogic;

type IO_FSM_STATE is(IDLE, HEATON, FURNACE_NOW_HOT, FURNACE_COOL,COOLON, AC_NOW_READY, AC_DONE);
                                             
signal CURRENT_STATE, NEXT_STATE : IO_FSM_STATE; 
begin

process(CLK,RESET)
begin
if RESET = '1' then 
CURRENT_STATE <= IDLE; 
elsif CLK'event and CLK = '1' then
CURRENT_STATE <= NEXT_STATE; 
end if; 
end process; 

process(CLK) begin
if CLK'event and CLK = '1' then
Current_temp_reg <= Current_temp;
Desired_temp_reg <= Desired_temp; 
Display_sel_reg <= Display_sel; 
COOL_reg <= COOL; 
HEAT_reg <= HEAT; 
Furnace_hot_reg <= Furnace_hot; 
AC_ready_reg <= AC_ready;
end if; 
end process; 

process(CLK)
begin 
if CLK'event and CLK = '1' then
    if Display_sel_reg = '1' then 
        Temp_display <= Current_temp; 
    else 
        Temp_display <= Desired_temp;
    end if;
end if;
end process;

process(CURRENT_STATE,Current_temp_reg, Desired_temp_reg,HEAT_reg,COOL_reg,Furnace_hot_reg,AC_ready_reg)
begin 
case CURRENT_STATE is 
when IDLE => 
if(Current_temp_reg< Desired_temp_reg  and HEAT_reg = '1' and COOL_reg = '0') then 
NEXT_STATE <= HEATON; 
elsif(Current_temp_reg> Desired_temp_reg and HEAT_reg ='0' and COOL_reg = '1') then 
NEXT_STATE <= COOLON; 
else
NEXT_STATE <= IDLE;
end if; 

when HEATON => 
if(Furnace_hot_reg = '1') then 
NEXT_STATE <= FURNACE_NOW_HOT; 
else
NEXT_STATE <= HEATON;
end if; 

when FURNACE_NOW_HOT => 
if (not(Current_temp_reg < Desired_temp_reg  and HEAT_reg = '1' and COOL_reg = '0')) then 
NEXT_STATE <= FURNACE_COOL; 
else 
NEXT_STATE <= FURNACE_NOW_HOT; 
end if; 

when FURNACE_COOL => 
if (Furnace_hot_reg = '0') then 
NEXT_STATE <= IDLE; 
else 
NEXT_STATE <= FURNACE_COOL; 
end if;  


when COOLON => 
if(AC_ready_reg = '1') then 
NEXT_STATE <= AC_NOW_READY; 
else 
NEXT_STATE <= COOLON; 
end if; 

when AC_NOW_READY => 
if(not(Current_temp_reg> Desired_temp_reg and HEAT_reg ='0' and COOL_reg = '1')) then 
NEXT_STATE <= AC_DONE; 
else 
NEXT_STATE <= AC_NOW_READY; 
end if; 

when AC_DONE => 
if(AC_ready_reg = '0') then 
NEXT_STATE <= IDLE; 
else 
NEXT_STATE <= AC_DONE; 
end if;

when others => 
NEXT_STATE <= IDLE;  
end case;
end process;


--CURRENT_STATE 
--NEXT_STATE
--HEATON, FURNACE_NOW_HOT, FURNACE_COOL, COOLON, AC_NOW_READY, AC_DONE

process(CLK)
begin
if(CLK'event and CLK = '1') then 
    if NEXT_STATE = HEATON  or NEXT_STATE = FURNACE_NOW_HOT then 
    Furnace_on <= '1'; 
    else 
    Furnace_on <= '0';
    end if; 
    if NEXT_STATE = COOLON or NEXT_STATE = AC_NOW_READY then 
    AC_on <= '1'; 
    else 
    AC_on <= '0';
    end if; 
    if NEXT_STATE = FURNACE_NOW_HOT or NEXT_STATE = AC_NOW_READY or 
       NEXT_STATE = FURNACE_COOL or NEXT_STATE = AC_DONE then 
    FAN_on <= '1'; 
    else 
    FAN_on <= '0';
    end if; 
end if; 
end process;
end RTL;



process(CLK,RESET)
begin
if RESET ='1' then
Furnace_on <= '0';
AC_on <= '0';
FAN_on <= '0';



elsif(CLK'event and CLK = '1') then



case CURRENT_STATE is

when HEATON =>
Furnace_on <= '1';
AC_on <= '0';
FAN_on <= '0';

when FURNACE_NOW_HOT =>
Furnace_on <= '1';
AC_on <= '0';
FAN_on <= '1';

when FURNACE_COOL =>
Furnace_on <= '0';
AC_on <= '0';
FAN_on <= '1';

when COOLON =>
Furnace_on <= '0';
AC_on <= '1';
FAN_on <= '0';

when AC_NOW_READY =>
Furnace_on <= '0';
AC_on <= '1';
FAN_on <= '1';

when AC_DONE  =>
Furnace_on <= '0';
AC_on <= '0';
FAN_on <= '1';

when others =>
Furnace_on <= '0';
AC_on <= '0';
FAN_on <= '0';

end case;
end if;
end process;
end RTL;

-- Test Bench 

library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

entity T_thermo is

end T_thermo;

architecture test of T_thermo is

component thermo

port (CLK         : in std_ulogic;

      

      RESET       : in std_ulogic; 

      

      Current_temp : in std_ulogic_vector(6 downto 0);

      Desired_temp : in std_ulogic_vector(6 downto 0);

      Display_sel  : in std_ulogic;

      

      COOL         : in std_ulogic;

      HEAT         : in std_ulogic;

      

      Furnace_hot  : in std_ulogic;

      

      AC_ready		: in std_logic;

      

      Temp_display	: out std_ulogic_vector(6 downto 0);

     

      AC_on        : out std_ulogic;

      Furnace_on	   : out std_ulogic;

      FAN_on           : out std_ulogic);

end component;

signal CLK, RESET: std_ulogic :='0';      

signal Current_temp, Desired_temp : std_ulogic_vector(6 downto 0);

signal Display_sel,COOL,HEAT,Furnace_hot,AC_ready : std_ulogic;

signal Temp_display : std_ulogic_vector(6 downto 0);

signal AC_on,Furnace_on,FAN_on   : std_ulogic;

begin

CLK <= not CLK after 50 ns; 

RESET <= '1', '0' after 100 ns;

UUT: thermo port map ( CLK => CLK,

            

                       RESET => RESET,

             Current_temp => Current_temp,

             Desired_temp => Desired_temp,

             Display_sel => display_sel,

             COOL => COOL,

             HEAT => HEAT,

             

             Furnace_hot => Furnace_hot, 

             

             AC_ready => AC_ready,

             

             Temp_display => Temp_display,

             

             AC_on =>  AC_on,

             Furnace_on => Furnace_on,

             

             FAN_on=> FAN_on );

                 

process -- no sensitivity list

begin

Current_temp <= "1101110";

Desired_temp <= "0101010"; 

Display_sel <= '0'; 

COOL <= '1'; 

HEAT <= '0'; 

Furnace_hot <= '1'; 

AC_ready <= '0'; 

wait for 200 ns;

Display_sel <= '1'; 

COOL <= '0'; 

HEAT <= '1'; 

Furnace_hot <= '0'; 

AC_ready <= '1';

wait for 200 ns;

Current_temp <= "1000010";

Desired_temp <= "1111110";  

Display_sel <= '0'; 

COOL <= '1'; 

HEAT <= '1'; 

Furnace_hot <= '1'; 

AC_ready <= '1';

wait for 200 ns;

Current_temp <= "0010010";

Desired_temp <= "1111111"; 

Display_sel <= '0'; 

COOL <= '0'; 

HEAT <= '0'; 

Furnace_hot <= '0'; 

AC_ready <= '0';

wait for 200 ns; 

Display_sel <= '1'; 

COOL <= '0'; 

HEAT <= '1'; 

Furnace_hot <= '1'; 

AC_ready <= '0';

wait for 50 ns; 

wait; 

end process; 

end test;

--I did not register my inputs that what I did not do  Next time I would need to put in a registered input. 



--- Other peers code 

How will you incorporate a state machine to control the outputs in your design.

library IEEE;

use IEEE.std_logic_1164.all;





ENTITY thermostat IS

PORT (

        clk: IN std_logic;

        reset: IN std_logic;

    current_temp : IN std_logic_vector(6 DOWNTO 0);

        desired_temp : IN std_logic_vector(6 DOWNTO 0);

        display_select: IN std_logic;

cool: IN std_logic;

heat: IN std_logic;

ac_ready: IN std_logic;

furnace_hot : IN std_logic;

        temp_display: OUT std_logic_vector(6 DOWNTO 0);

        ac_on: OUT std_logic;

    furnace_on: OUT std_logic;

fan_on : OUT std_logic

        );

END thermostat;



ARCHITECTURE behav OF thermostat IS

--states

TYPE state_type is(

idle_s,

heat_on_s,

furnace_now_hot_s,

furnace_cool_s,

cool_on_s,

ac_now_ready_s,

ac_done_s);

SIGNAL current_state : state_type;

SIGNAL next_state : state_type;



--registered input signals

SIGNAL current_temp_reg : std_logic_vector(6 DOWNTO 0);

SIGNAL desired_temp_reg : std_logic_vector(6 DOWNTO 0);

SIGNAL display_select_reg : std_logic;

SIGNAL cool_reg : std_logic;

SIGNAL heat_reg : std_logic;

SIGNAL ac_ready_reg : std_logic;

SIGNAL furnace_hot_reg: std_logic;



BEGIN

PROCESS (clk, reset)

BEGIN

    IF clk'event and clk = '1' THEN

        current_temp_reg    <= current_temp;

        desired_temp_reg    <= desired_temp;

        display_select_reg  <= display_select;

        cool_reg            <= cool;

        heat_reg            <= heat;

ac_ready_reg     <= ac_ready;

furnace_hot_reg     <= furnace_hot;

    END IF;

END PROCESS;



--functionality

PROCESS (clk, reset)

BEGIN

    IF clk'event and clk = '1' THEN

        IF reset = '1' THEN

            temp_display <= "0000000";

        ELSIF(display_select_reg = '0')  THEN

                temp_display <= current_temp_reg;

            ELSE

                temp_display <= desired_temp_reg;

        END IF;

    END IF;

END PROCESS;



--old functionality for furnace_on and ac_on

--controlled via state machine

--PROCESS (clk, reset)

--BEGIN

--IF clk'event and clk = '1' THEN

--    IF reset = '1' THEN

--        ac_on <= '0';

--        furnace_on <= '0';

--    ELSIF(cool_reg = '1' and current_temp_reg > desired_temp_reg ) THEN

--        ac_on <= '1';

--    END IF;

-- IF(heat_reg = '1' and current_temp_reg < desired_temp_reg) THEN

--     furnace_on <= '1';

-- END IF;

--END IF;

--END PROCESS;



--register current state

PROCESS(clk, reset)

BEGIN

IF reset = '1' then

current_state <= idle_s;

else

current_state <= next_state;

END IF;

END PROCESS;



--combinatorial state transitions

PROCESS(current_state, heat_reg, cool_reg, furnace_hot_reg, ac_ready_reg, current_temp_reg, desired_temp_reg)

BEGIN

--state default

next_state <= current_state;

CASE current_state is

WHEN idle_s =>

IF cool_reg = '1' and (current_temp_reg > desired_temp_reg) THEN

next_state <= cool_on_s;

ELSIF heat_reg = '1' and (current_temp_reg < desired_temp_reg) THEN

next_state <= heat_on_s;

END IF;

WHEN cool_on_s =>

IF ac_ready_reg = '1' THEN

next_state <= ac_now_ready_s;

END IF;

WHEN heat_on_s =>

IF furnace_hot_reg = '1' THEN

next_state <= furnace_now_hot_s;

END IF;

WHEN ac_now_ready_s =>

IF not(cool_reg = '1' and (current_temp_reg > desired_temp_reg)) THEN

next_state <= ac_done_s;

END IF;

WHEN furnace_now_hot_s =>

IF not(heat_reg = '1' and (current_temp_reg < desired_temp_reg)) THEN

next_state <= furnace_cool_s;

END IF;

WHEN ac_done_s =>

IF ac_ready_reg = '0' THEN

next_state <= idle_s;

END IF;

WHEN furnace_cool_s =>

IF furnace_hot_reg = '0' THEN

next_state <= idle_s;

END IF;

END CASE;

END PROCESS;



--process for the outputs

PROCESS(clk, reset)

BEGIN

IF(reset = '1') THEN

furnace_on <= '0';

ac_on <= '0';

fan_on <= '0';

ELSIF clk'event and clk = '1' THEN

IF next_state = heat_on_s OR

   next_state = furnace_now_hot_s THEN

furnace_on <= '1';

ELSE

furnace_on <= '0';

END IF;

IF next_state = cool_on_s OR

   next_state = ac_now_ready_s THEN

ac_on <= '1';

ELSE

ac_on <= '0';

END IF;

IF next_state = ac_now_ready_s OR

   next_state = ac_done_s OR

   next_state = furnace_now_hot_s OR

   next_state = furnace_cool_s THEN

fan_on <='1';

ELSE

fan_on <='0';

END IF;

END IF;

END PROCESS;



END behav;



--tb

library IEEE;

use IEEE.std_logic_1164.all;





ENTITY thermostat_tb IS



END thermostat_tb;



ARCHITECTURE test OF thermostat_tb IS

COMPONENT thermostat

PORT (

        clk: IN std_logic;

        reset: IN std_logic;

    current_temp : IN std_logic_vector(6 DOWNTO 0);

        desired_temp : IN std_logic_vector(6 DOWNTO 0);

        display_select: IN std_logic;

cool: IN std_logic;

heat: IN std_logic;

ac_ready: IN std_logic;

furnace_hot : IN std_logic;

        temp_display: OUT std_logic_vector(6 DOWNTO 0);

        ac_on: OUT std_logic;

    furnace_on: OUT std_logic;

fan_on : OUT std_logic

        );

END COMPONENT;



SIGNAL clk : std_logic := '0';

SIGNAL reset : std_logic := '0';

SIGNAL current_temp : std_logic_vector(6 DOWNTO 0);

SIGNAL desired_temp : std_logic_vector(6 DOWNTO 0);

SIGNAL temp_display : std_logic_vector(6 DOWNTO 0);

SIGNAL display_select : std_logic;

SIGNAL cool : std_logic;

SIGNAL heat : std_logic;

SIGNAL ac_on : std_logic;

SIGNAL furnace_on : std_logic;

SIGNAL furnace_hot : std_logic;

SIGNAL ac_ready : std_logic;

SIGNAL fan_on : std_logic;





BEGIN



clk <= NOT clk AFTER 5 ns;

dut: thermostat PORT MAP (

clk => clk,

reset => reset,

current_temp => current_temp,

desired_temp => desired_temp,

cool => cool,

heat => heat,

ac_ready => ac_ready,

furnace_hot => furnace_hot,

temp_display => temp_display,

display_select => display_select,

ac_on => ac_on,

furnace_on => furnace_on,

fan_on => fan_on

);





PROCESS

BEGIN

current_temp <= "0000000";

desired_temp <= "1111111";

furnace_hot <= '0';

ac_ready <= '0';

heat <= '0';

cool <= '0';

display_select <= '0';

wait for 50 ns;

display_select <= '1';

wait for 50 ns;

heat <='1';

wait until furnace_on = '1';

furnace_hot <= '1';

wait until fan_on = '1';

heat <= '0';

wait until furnace_on = '0';

furnace_hot <= '0';

wait for 50 ns;

heat <= '0';

wait for 50 ns;

current_temp <= "1000000";

desired_temp <= "0100000";

END PROCESS;

END ARCHITECTURE;